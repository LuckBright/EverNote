<template>
  <div class="ever_bg_01">
    <div class="ever_box ever_box_02">
      <h3 class="alg_c">忘记密码</h3>
      <el-form class="pwd_form" :rules="smsRules" ref="smsForm" :model="smsForm" label-width="100px">
        <el-form-item label="账号" prop="username">
          <el-input class="spe_mobile_inp" v-model="smsForm.username" size="large" placeholder="请输入账号"></el-input>
        </el-form-item>
        <el-form-item label="手机号码" prop="mobile">
          <el-input class="spe_mobile_inp" type="tel" :maxlength="11" v-model="smsForm.mobile" size="large" placeholder="手机号码">
            <template slot="prepend">+86</template>
          </el-input>
        </el-form-item>
        <el-form-item label="手机验证码" prop="smscode">
          <el-row>
            <el-col :span="14"><el-input type="tel" :maxlength="6" v-model="smsForm.smscode" size="large" placeholder="请输入手机验证码"></el-input></el-col>
            <el-col :span="8" :offset="1" align="left"><el-button class="el-button-02" size="large" :disabled="smsCodeDisable" @click="getLoginSmsCode">{{!smsCodeIng ? '获取验证码' : computedTime + 's'}}</el-button></el-col>
          </el-row>
        </el-form-item>
        <el-form-item label="密码" prop="password">
          <el-input class="spe_mobile_inp" type="password" :maxlength="11" v-model="smsForm.password" size="large" placeholder="请输入新密码（新密码必须6-20位字母、数字或者组合组成）"></el-input>
        </el-form-item>
        <el-form-item label="确认密码" prop="checkPwd">
          <el-input class="spe_mobile_inp" type="password" :maxlength="11" v-model="smsForm.checkPwd" size="large" placeholder="请确认密码" auto-complete="off" @keyup.enter.native="handleSubmit2"></el-input>
        </el-form-item>
        <el-form-item class="mt40" style="margin: 0 20px 0 -20px">
          <el-button class="el-button-01" type="primary" size="large" @click="submitForm('smsForm', 2)" :disabled="smsFormDisable">提 交</el-button>
        </el-form-item>
      </el-form>
    </div>
  </div>
</template>

<script>
// checkPhone
import { checkPhone } from '@/util/common'
import validator from '@/titancare/utils/validator'
import api from '@/titancare/api/password'
export default {
  data () {
    let validatePass2 = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请再次输入密码'))
      } else if (value !== this.smsForm.password) {
        callback(new Error('两次输入密码不一致!'))
      } else {
        callback()
      }
    }
    return {
      logining: false,
      smsCodeDisable: true,
      smsFormDisable: true,
      smsCodeIng: false,
      computedTime: 60,
      smsForm: {
        username: '',
        mobile: '',
        smscode: '',
        password: '',
        checkPwd: ''
      },
      smsRules: {
        username: [
          { required: true, message: '请输入账号', trigger: 'blur' }
        ],
        mobile: [
          { required: true, message: '请输入手机号码', trigger: 'blur' },
          { validator: validator.checkMobile, trigger: 'blur' }
        ],
        smscode: [
          { required: true, message: '请输入手机验证码', trigger: 'blur' },
          { validator: validator.checkSMSCode, trigger: 'blur' }
        ],
        password: [
          { required: true, message: '请输新密码', trigger: 'blur' },
          { validator: validator.checkPassword, trigger: 'blur' }
        ],
        checkPwd: [
          { validator: validatePass2, trigger: 'blur' }
        ]
      }
    }
  },
  methods: {
    async submitForm (formName, step) {
      this.$refs[formName].validate(async (valid) => {
        if (valid) {
          try {
            let result = await api.modifyPassword({ account: this.smsForm.username, phone: this.smsForm.mobile, code: this.smsForm.smscode, newPwd: this.smsForm.password })
            if (result.head.errCode === 0) this.$router.push('/login')
          } catch (err) {
            this.$messageTips(this, 'error')
          }
        } else {
          return false
        }
      })
    },
    async getLoginSmsCode () {
      const _self = this
      if (_self.smsForm.mobile && !_self.smsCodeDisable && !_self.smsCodeIng) {
        _self.computedTime = 60
        _self.smsCodeIng = !_self.smsCodeIng
        _self.timer = setInterval(() => {
          _self.computedTime--
          if (_self.computedTime === 0) {
            _self.smsCodeIng = !_self.smsCodeIng
            clearInterval(_self.timer)
          }
        }, 1000)
        try {
          const res = await api.sendSmsCode({ account: _self.smsForm.username, phone: _self.smsForm.mobile })
          if (res.head.errCode === 0 && res.data) {
            this.$messageTips(this, 'success', '短信验证码发送成功！')
          } else {
            _self.smsCodeIng = !_self.smsCodeIng
            clearInterval(_self.timer)
          }
        } catch (err) {
          this.$messageTips(this, 'error')
          _self.smsCodeIng = !_self.smsCodeIng
          clearInterval(_self.timer)
        }
      }
    }
  },
  watch: {
    'smsForm.mobile': function (cur, old) {
      if (checkPhone(cur) && this.smsForm.username) {
        this.smsCodeDisable = false
      } else {
        this.smsCodeDisable = true
      }
    },
    'smsForm.username': function (cur, old) {
      if (checkPhone(this.smsForm.mobile) && cur) {
        this.smsCodeDisable = false
      } else {
        this.smsCodeDisable = true
      }
    },
    'smsForm': {
      handler (cur, old) {
        if (cur && cur.mobile && cur.smscode) {
          this.$refs['smsForm'].validate((valid) => {
            if (valid) {
              this.smsFormDisable = false
            } else {
              this.smsFormDisable = true
            }
          })
        }
      },
      deep: true
    }
  }
}
</script>

<style scoped lang="scss">
@import url(./index.scss);
.ever_box_02 {
  height: 420px;
  width: 400px;
  margin-left: -350px;
  padding: 30px 150px;
  margin-top: -210px;
}
.login_link{
  position:absolute;
  bottom: 20px;
  right: 20px;
  text-decoration: none;
  color:#1C7BEF;
}
</style>
